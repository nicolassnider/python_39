# -*- coding: utf-8 -*-
"""PracticePython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HnAo5r-kaKEtApNhMSr-xUwAwKu9Xk--

Variables and Datatypes
"""

import math as m
name = "Rahul"

"""# variable section"""

print(name)

type(name)

name = 1
print(name)
type(name)

name = 1.5
print(name)
type(name)

#ls

"""# New Section"""

j = 3

i = 1
print(i)

"""# Arithmatic operation section"""

a = 5
b = 2
c = a + b
print("a:", a)
print("b:", b)
print("c:", c)

a = 5
b = 2
c = a - b
print("a:", a)
print("b:", b)
print("c:", c)

a = 5
b = 2
c = a * b
print("a:", a)
print("b:", b)
print("c:", c)

a = 5
b = 2
c = a / b
print("a:", a)
print("b:", b)
print("c:", c)

b = a ** 2
print(b)

b = a ** 3
print(b)

b = a ** 4
print(b)


"""# Conditioning and Looping Section"""

age = 17
if age >= 18:
    print("You can Vote")
else:
    print("You cannot Vote")

age = 15
if age > 18:
    print("You are eligible to Vote")
elif age == 17:
    print("You are just about to get this benefit")
else:
    print("You have to wait for more time..")

for i in range(1, 5):
    print(i)
    print(i, i**2)

i = 0
while i < 5:
    print(i)
    i += 2


"""# Defining Methods Section"""


def add(a, b):
    return a + b


add(3, 4)

sum = add(5, 6)
print("sum:", sum)


def display():
    i = 0
    while i < 5:
        print(i)
        i += 2


display()

"""# List and Dictionary Section"""

name1 = "Rahul"
name2 = "John"

nameList = [name1, name2]

type(nameList)

print(nameList)

contact = 999999

employeeList = [name1, name2, contact]

type(employeeList)

print(employeeList)

print(employeeList[0])

print(employeeList[1:3])

employeeList[1] = "Kumar"

print(employeeList)

employeeList[2] = 9090909090
print(employeeList)

len(employeeList)

employeeListCopy = employeeList
print(employeeListCopy)

employeeListCopy[0] = "John"

print(employeeListCopy)

print(employeeList)

employeeListCopyCopy = list(employeeListCopy)

print(employeeListCopyCopy)
print(employeeListCopy)

employeeListCopyCopy[0] = "Rahul"

print(employeeListCopyCopy)
print(employeeListCopy)

mergedEmployeeList = employeeListCopy + employeeListCopyCopy

print(mergedEmployeeList)

len(mergedEmployeeList)

tempList = list(range(5))

myMap = map(lambda x: x*2, tempList)

type(tempList)
type(myMap)

print(myMap)

type(myMap)

type(tempList)

print(list(myMap))

myMap = map(lambda x: x**2, tempList)

print(list(myMap))

"""# Tuple, Set and Dictionary Section"""

my_List = ["Rahul", 999999]

type(my_List)

my_Tuple = tuple(my_List)

type(my_Tuple)

print(my_Tuple)

print(my_List)

print(my_Tuple[0])

#my_Tuple[0] = "John"

my_List_New = ["Rahul", 9999, 9999]
print(my_List_New)

my_Set = set(my_List_New)

type(my_Set)

print(my_Set)

#my_Set[0] = "John"

my_Dictionary = {}
type(my_Dictionary)

my_Dictionary["name"] = "Rahul"
my_Dictionary["contact"] = 99999

print(my_Dictionary)

print(my_Dictionary["name"])

print(my_Dictionary["contact"])

"""# Importing Packages and Class Section"""


m.factorial(5)

m.factorial(3)

m.sqrt(4)


class MyClass:
    def add(self, a, b):
        return a + b


objMyClass = MyClass()

objMyClass.add(5, 6)
